<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="normalize" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\normalize.css;System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089;Windows-1252</value>
  </data>
  <data name="script" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\script.js;System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089;Windows-1252</value>
  </data>
  <data name="style" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\style.css;System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089;Windows-1252</value>
  </data>
  <data name="tag_anythingUnsaved" xml:space="preserve">
    <value>Solution or any document unsaved indicator ('*' if unsaved changes, otherwise empty).</value>
  </data>
  <data name="tag_configurationName" xml:space="preserve">
    <value>Current configuration name (e.g. Release).</value>
  </data>
  <data name="tag_debuggedProcessesArgs" xml:space="preserve">
    <value>Arguments of the processes currently debugged (including the executable file name before each set of arguments if more than 1 process).</value>
  </data>
  <data name="tag_documentName" xml:space="preserve">
    <value>Active document or, if no active document, window name.</value>
  </data>
  <data name="tag_documentParentPathX" xml:space="preserve">
    <value>Active document path parent element at the specified index (e.g. for C:\F1\Foo.cs, [parent:0] = Foo.cs [parent:1] = F1)</value>
  </data>
  <data name="tag_documentParentPathXY" xml:space="preserve">
    <value>Active document path parent segment over the specified range (e.g. for C:\F1\Foo.cs, [parent:1:0] =F1\Foo.cs, [parent:0:1] = Foo.cs\F1)</value>
  </data>
  <data name="tag_documentPath" xml:space="preserve">
    <value>Active document full path or, if no active document, window name.</value>
  </data>
  <data name="tag_documentPathX" xml:space="preserve">
    <value>Active document path element at the specified index (e.g. for C:\F1\Foo.cs, [documentPath:0] = C:\, [documentPath:1] = C:\F1).</value>
  </data>
  <data name="tag_documentPathXY" xml:space="preserve">
    <value>Active document path segment over the specified range (e.g. for C:\F1\Foo.cs, [path:0:2] = C:\F1\Foo.cs, [path:2:0] = Foo.cs\F1\C:)</value>
  </data>
  <data name="tag_documentProjectFileName" xml:space="preserve">
    <value>Active document project file name (if the document is part of a loaded project)</value>
  </data>
  <data name="tag_documentProjectName" xml:space="preserve">
    <value>Active document project name (if the document is part of a loaded project)</value>
  </data>
  <data name="tag_documentUnsaved" xml:space="preserve">
    <value>Active document unsaved indicator ('*' if unsaved changes, otherwise empty).</value>
  </data>
  <data name="tag_elevationSuffix" xml:space="preserve">
    <value>Elevation suffix if applicable (e.g. " (Administrator)"), otherwise empty.</value>
  </data>
  <data name="tag_envX" xml:space="preserve">
    <value>Environment variable X for current Visual Studio process.</value>
  </data>
  <data name="tag_gitBranchName" xml:space="preserve">
    <value>Current Git branch name. Make sure Git's executable directory is added to the Windows PATH variable or specify its location in settings.</value>
  </data>
  <data name="tag_gitRepositoryName" xml:space="preserve">
    <value>Current Git repository name (local). Make sure Git's executable directory is added to the Windows PATH variable or specify its location in settings.</value>
  </data>
  <data name="tag_hgBranchName" xml:space="preserve">
    <value>Current Mercurial branch name. Make sure Mercurial's executable directory is added to the Windows PATH variable or specify its location in settings.</value>
  </data>
  <data name="tag_ideName" xml:space="preserve">
    <value>Name of the IDE (e.g. Microsoft Visual Studio), including elevation suffix if applicable (e.g. " (Administrator)").</value>
  </data>
  <data name="tag_parentPath" xml:space="preserve">
    <value>Current solution path or, if no solution open, document path, with depth determined by "Farthest parent folder depth" and "Closest parent folder depth" settings.</value>
  </data>
  <data name="tag_parentX" xml:space="preserve">
    <value>Path parent element at the specified index (e.g. for C:\F1\MySolutionFolder\MySolution.sln, [parent:0] = MySolution.sln [parent:1] = MySolutionFolder)</value>
  </data>
  <data name="tag_parentXY" xml:space="preserve">
    <value>Path parent segment over the specified range (e.g. for C:\F1\MySolutionFolder\MySolution.sln, [parent:2:1] =F1\MySolutionFolder, [parent:1:2] = MySolutionFolder\F1)</value>
  </data>
  <data name="tag_path" xml:space="preserve">
    <value>Current solution full path or, if no solution open, document full path or, if no active document, window name.</value>
  </data>
  <data name="tag_pathX" xml:space="preserve">
    <value>Path element at the specified index (e.g. for C:\F1\MySolutionFolder\MySolution.sln, [path:0] = C:\, [path:1] = C:\F1)</value>
  </data>
  <data name="tag_pathXY" xml:space="preserve">
    <value>Path segment over the specified range (e.g. for C:\F1\MySolutionFolder\MySolution.sln, [path:0:2] = C:\F1\MySolutionFolder, [path:2:0] = MySolutionFolder\F1\C:)</value>
  </data>
  <data name="tag_platformName" xml:space="preserve">
    <value>Current platform name (e.g. x86).</value>
  </data>
  <data name="tag_projectName" xml:space="preserve">
    <value>Active project name.</value>
  </data>
  <data name="tag_solutionName" xml:space="preserve">
    <value>Active solution name.</value>
  </data>
  <data name="tag_startupProjectsNames" xml:space="preserve">
    <value>Startup project(s) name(s), separated with ' &amp; ' if multiple.</value>
  </data>
  <data name="tag_startupProjectsNamesNonRelative" xml:space="preserve">
    <value>Startup project(s) name(s), separated with ' &amp; ' if multiple, with the relative path stripped out.</value>
  </data>
  <data name="tag_startupProjectsNamesNonRelativeX" xml:space="preserve">
    <value>Startup project(s) name(s), separated with X if multiple, with the relative path stripped out. Do not use '[', ']', '-', or ':' for X to avoid parsing conflicts. Recommended values: ' &amp; ', ', ' or ' | ' (without quotes).</value>
  </data>
  <data name="tag_startupProjectsNamesX" xml:space="preserve">
    <value>Startup project(s) name(s), separated with X if multiple. Do not use '[', ']', '-', or ':' for X to avoid parsing conflicts. Recommended values: ' &amp; ', ', ' or ' | ' (without quotes).</value>
  </data>
  <data name="tag_svnDirectoryName" xml:space="preserve">
    <value>Current SVN directory name. Make sure SVN's executable directory is added to the Windows PATH variable or specify its location in settings.</value>
  </data>
  <data name="tag_svnDirectoryNameX" xml:space="preserve">
    <value>SVN directory element at the specified index (e.g. for /Branches/Developer/UserName/MySolutionFolder/MySolution.sln, [svnDirectoryName:0] = /, [svnDirectoryName:1] = Branches)</value>
  </data>
  <data name="tag_svnDirectoryNameXY" xml:space="preserve">
    <value>SVN directory segment over the specified range (e.g. for /Branches/Developer/UserName/MySolutionFolder/MySolution.sln, [svnDirectoryName:0:2] = /Branches/Developer, [svnDirectoryName:2:0] = Developer/Branches//)</value>
  </data>
  <data name="tag_tfsBranchName" xml:space="preserve">
    <value>Team Foundation Server (TFS) branch name of the currently loaded solution.</value>
  </data>
  <data name="tag_vsMajorVersion" xml:space="preserve">
    <value>Major version of Visual Studio (e.g. 14, 15, 16...).</value>
  </data>
  <data name="tag_vsMajorVersionYear" xml:space="preserve">
    <value>Major version of Visual Studio, in year form (e.g. 2015, 2017, 2019...).</value>
  </data>
  <data name="tag_vsProcessID" xml:space="preserve">
    <value>Process ID of Visual Studio</value>
  </data>
  <data name="tag_windowName" xml:space="preserve">
    <value>Active document or tool window name.</value>
  </data>
  <data name="tag_workspaceName" xml:space="preserve">
    <value>Team Foundation Server (TFS) workspace name of the currently loaded solution.</value>
  </data>
  <data name="tag_workspaceOwnerName" xml:space="preserve">
    <value>Team Foundation Server (TFS) workspace owner name of the currently loaded solution.</value>
  </data>
</root>